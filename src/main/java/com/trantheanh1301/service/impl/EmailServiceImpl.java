/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.trantheanh1301.service.impl;

import com.trantheanh1301.service.EmailService;
import jakarta.mail.*;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import java.util.Properties;

////T·∫°o m·ªôt giao di·ªán ƒë·∫∑t l·ªãch ƒë·∫πp h∆°n.
//
//G·ª≠i th√™m c·∫£ l·ªãch h·∫πn v√†o Google Calendar n·∫øu c·∫ßn.
//
//Th√™m template HTML v√†o n·ªôi dung email.

@org.springframework.stereotype.Service
public class EmailServiceImpl implements EmailService {

    private final String username = "theanhtran13012004@gmail.com";
    private final String password = "mxia nuqr klzf owdk"; // App password n·∫øu d√πng Gmail

    public void sendAppointmentConfirmation(String toEmail, String subject, String patientName, String doctorName, String time) {
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props,
                new jakarta.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username, "Ph√≤ng kh√°m tr·ª±c tuy·∫øn"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject(subject);

            String emailContent = String.format("""
                Xin ch√†o %s,

                B·∫°n ƒë√£ ƒë·∫∑t l·ªãch kh√°m v·ªõi b√°c sƒ© %s v√†o l√∫c %s.
                Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù.

                Tr√¢n tr·ªçng,
                H·ªá th·ªëng qu·∫£n l√Ω kh√°m b·ªánh
            """, patientName, doctorName, time);

            message.setText(emailContent);

            Transport.send(message);
            System.out.println("üìß Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn: " + toEmail);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void sendPaymentSuccessEmail(String toEmail, String patientName, String amount, String transactionId) {
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props,
                new jakarta.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username, "Ph√≤ng kh√°m tr·ª±c tuy·∫øn"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng");

            String content = String.format("""
                Xin ch√†o %s,

                Ch√∫ng t√¥i x√°c nh·∫≠n b·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng v·ªõi c√°c th√¥ng tin sau:

                ‚úÖ M√£ giao d·ªãch: %s
                üí∞ S·ªë ti·ªÅn: %s VNƒê

                C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!

                Tr√¢n tr·ªçng,
                H·ªá th·ªëng qu·∫£n l√Ω kh√°m b·ªánh
            """, patientName, transactionId, amount);

            message.setText(content);
            Transport.send(message);

            System.out.println("‚úÖ ƒê√£ g·ª≠i email thanh to√°n th√†nh c√¥ng ƒë·∫øn " + toEmail);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
